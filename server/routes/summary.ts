import { RequestHandler } from "express";
import { Resend } from 'resend';

export interface GenerateSummaryRequest {
  transcript: string;
  customPrompt: string;
}

export interface GenerateSummaryResponse {
  summary: string;
  error?: string;
}

export const handleGenerateSummary: RequestHandler = async (req, res) => {
  try {
    const { transcript, customPrompt }: GenerateSummaryRequest = req.body;
    console.log("Generating summary request received, transcript length:", transcript?.length || 0);

    if (!transcript || transcript.trim().length === 0) {
      return res.status(400).json({ 
        error: "Transcript is required" 
      });
    }

    const groqApiKey = process.env.GROQ_API_KEY;
    console.log("Groq API key present:", !!groqApiKey);
    console.log("Groq API key length:", groqApiKey?.length || 0);
    
    if (!groqApiKey) {
      return res.status(500).json({ 
        error: "Groq API key not configured. Please set GROQ_API_KEY environment variable." 
      });
    }

    if (!groqApiKey.startsWith('gsk_')) {
      console.error("Invalid Groq API key format");
      return res.status(500).json({ 
        error: "Invalid Groq API key format. Key should start with 'gsk_'" 
      });
    }

    // Prepare the prompt for Groq
    const systemPrompt = "You are a professional meeting summarizer. Your task is to analyze meeting transcripts and create clear, actionable summaries.";
    const userPrompt = `${customPrompt || "Summarize this meeting transcript in clear bullet points, highlighting key decisions, action items, and next steps."}\n\nTranscript:\n${transcript}`;

    // Call Groq API
    console.log("Calling Groq API...");
    const groqResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${groqApiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant", // Using a fast, supported model for summarization
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: userPrompt
          }
        ],
        temperature: 0.3, // Lower temperature for more consistent, focused summaries
        max_tokens: 2048,
        top_p: 1,
        stream: false
      }),
    });

    if (!groqResponse.ok) {
      let errorData;
      try {
        errorData = await groqResponse.json();
      } catch (parseError) {
        errorData = { error: { message: `HTTP ${groqResponse.status}: ${groqResponse.statusText}` } };
      }
      console.error("Groq API error:", errorData);
      return res.status(500).json({ 
        error: `Groq API error: ${errorData.error?.message || errorData.message || "Unknown error"}` 
      });
    }

    console.log("Groq API response status:", groqResponse.status);

    let groqData;
    try {
      const responseText = await groqResponse.text();
      console.log("Raw response:", responseText.substring(0, 500));
      groqData = JSON.parse(responseText);
    } catch (parseError) {
      console.error("Error parsing Groq response:", parseError);
      return res.status(500).json({ 
        error: "Invalid response format from AI service" 
      });
    }
    
    if (!groqData.choices || groqData.choices.length === 0) {
      return res.status(500).json({ 
        error: "No summary generated by AI" 
      });
    }

    const summary = groqData.choices[0].message.content;

    const response: GenerateSummaryResponse = {
      summary: summary.trim()
    };

    console.log("Sending successful response, summary length:", response.summary.length);
    res.json(response);
  } catch (error) {
    console.error("Error in handleGenerateSummary:", error);
    console.error("Error stack:", error instanceof Error ? error.stack : "No stack trace");
    
    if (!res.headersSent) {
      res.status(500).json({ 
        error: "Internal server error while generating summary" 
      });
    }
  }
};

export interface ShareSummaryRequest {
  summary: string;
  recipients: string[];
}

export interface ShareSummaryResponse {
  success: boolean;
  error?: string;
  message?: string;
}

export const handleShareSummary: RequestHandler = async (req, res) => {
  try {
    const { summary, recipients }: ShareSummaryRequest = req.body;

    if (!summary || summary.trim().length === 0) {
      return res.status(400).json({ 
        success: false,
        error: "Summary is required" 
      });
    }

    if (!recipients || recipients.length === 0) {
      return res.status(400).json({ 
        success: false,
        error: "At least one recipient email is required" 
      });
    }

    // Validate email addresses
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const invalidEmails = recipients.filter(email => !emailRegex.test(email));
    if (invalidEmails.length > 0) {
      return res.status(400).json({ 
        success: false,
        error: `Invalid email addresses: ${invalidEmails.join(", ")}` 
      });
    }

    console.log("Attempting to send emails to:", recipients.join(", "));

    // Check if Resend API key is configured
    const resendApiKey = process.env.RESEND_API_KEY;
    console.log("Resend API key present:", !!resendApiKey);

    if (!resendApiKey) {
      return res.status(400).json({
        success: false,
        error: "Email service not configured. Please set RESEND_API_KEY environment variable to send emails."
      });
    }

    // Initialize Resend with API key
    const resend = new Resend(resendApiKey);

    try {
      // Create HTML email template
      const htmlTemplate = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 28px; font-weight: bold;">Meeting Summary</h1>
            <p style="color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 16px;">Generated by NoteSummary AI</p>
          </div>
          <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="background: #f8f9fa; padding: 25px; border-radius: 8px; border-left: 4px solid #667eea; margin-bottom: 30px;">
              <pre style="white-space: pre-wrap; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; margin: 0; color: #333; font-size: 14px;">${summary}</pre>
            </div>
            <div style="padding-top: 20px; border-top: 2px solid #e9ecef; text-align: center; color: #6c757d;">
              <p style="margin: 0; font-size: 12px;">This summary was generated using AI and shared via NoteSummary AI</p>
              <p style="margin: 5px 0 0 0; font-size: 12px;">Powered by advanced AI technology for efficient meeting management</p>
            </div>
          </div>
        </div>
      `;

      // Determine testing mode via environment variable
      const testingMode = (process.env.RESEND_TESTING_MODE || '').toLowerCase() === 'true';
      const verifiedTestEmail = process.env.VERIFIED_TEST_EMAIL || 'alamin03rockz@gmail.com';

      if (testingMode) {
        // Testing mode: route to a single verified address, include intended recipients in content
        const result = await resend.emails.send({
          from: 'NoteSummary AI <onboarding@resend.dev>',
          to: [verifiedTestEmail],
          subject: `Meeting Summary - NoteSummary AI (for: ${recipients.join(', ')})`,
          html: `
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin-bottom: 20px; border-radius: 5px;">
              <h3 style="margin: 0 0 10px 0; color: #856404;">ðŸ“§ Email Distribution Notice</h3>
              <p style="margin: 0; color: #856404;"><strong>Intended Recipients:</strong> ${recipients.join(', ')}</p>
              <p style="margin: 5px 0 0 0; color: #856404; font-size: 12px;">This email was sent to your verified address due to Resend testing mode limitations.</p>
            </div>
            ${htmlTemplate}
          `,
          text: `Meeting Summary - NoteSummary AI\n\nIntended Recipients: ${recipients.join(', ')}\n\n${summary}\n\nThis summary was generated using AI and shared via NoteSummary AI.`
        });

        console.log("Email sent successfully (testing mode):", result);

        return res.json({
          success: true,
          message: `Email sent to your verified address (${verifiedTestEmail}) with recipients list: ${recipients.join(', ')}. Set RESEND_TESTING_MODE=false (and verify a sending domain) to send directly to recipients.`
        });
      }

      // Production mode: send directly to all recipients
      const result = await resend.emails.send({
        from: 'NoteSummary AI <onboarding@resend.dev>',
        to: recipients,
        subject: 'Meeting Summary - NoteSummary AI',
        html: htmlTemplate,
        text: `Meeting Summary\n\n${summary}\n\nThis summary was generated using AI and shared via NoteSummary AI.`
      });

      console.log("Email sent successfully:", result);

      return res.json({
        success: true,
        message: `Successfully sent meeting summary to ${recipients.length} recipient${recipients.length > 1 ? 's' : ''}`
      });

    } catch (emailError) {
      console.error("Email service error:", emailError);

      return res.status(500).json({
        success: false,
        error: "Failed to send emails. Please try again later."
      });
    }

  } catch (error) {
    console.error("Error in handleShareSummary:", error);
    console.error("Error stack:", error instanceof Error ? error.stack : "No stack trace");
    
    if (!res.headersSent) {
      res.status(500).json({ 
        success: false,
        error: "Internal server error while sharing summary" 
      });
    }
  }
};
